// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String        @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?       @db.Text
  access_token      String?       @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?       @db.Text
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}

enum UserRole{
  ADMIN
  USER
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  role          UserRole        @default(USER)
  password      String?
  accounts      Account[]
  isTwoFactorEnabled  Boolean   @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken{
  id      String  @id @default(cuid())
  email   String
  token   String  @unique
  expires DateTime 

  @@unique([email,token])
}

model PasswordResetToken{
  id      String  @id @default(cuid())
  email   String
  token   String  @unique
  expires DateTime 

  @@unique([email,token])
}

model TwoFactorToken{
  id      String  @id @default(cuid())
  email   String
  token   String  @unique
  expires DateTime 

  @@unique([email,token])
}

model TwoFactorConfirmation{
  id        String    @id  @default(cuid())

  userId    String
  user      User      @relation(fields: [userId], references : [id], onDelete: Cascade)

  @@unique([userId])
}

model Store{
  id        String    @id @default(uuid())
  name      String
  userId    String
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[] @relation("StoreToCategory")
  sizes      Size[] @relation("StoreToSize")
  colors     Color[] @relation("StoreToColor")
  products   Product[] @relation("StoreToProduct")
  orders     Order[] @relation("StoreToOrder")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
}

model Billboard {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToBillboard", fields : [storeId], references: [id])
  label     String
  imageUrl  String
  categories Category[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Category {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToCategory", fields : [storeId], references: [id])
  billboardId String 
  billboard Billboard @relation(fields: [billboardId], references: [id])
  products  Product[] @relation("CategoryToProduct")
  name      String 
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Size {
   id       String    @id @default(uuid())
   storeId  String
   store    Store @relation("StoreToSize", fields: [storeId], references: [id])
   name     String
   value    String
   products Product[]
   createdAt DateTime  @default(now())
   updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Color {
   id       String    @id @default(uuid())
   storeId  String
   store    Store @relation("StoreToColor", fields: [storeId], references: [id])
   name     String
   value    String
   products Product[]
   createdAt DateTime  @default(now())
   updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Product {
  id       String   @id @default(uuid())
  storeId  String
  store    Store @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId  String 
  category    Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name     String
  price    Decimal
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  sizeId   String
  size     Size      @relation(fields: [sizeId],references: [id])
  colorId  String
  color    Color      @relation(fields: [colorId],references: [id])
  images   Image[]
  orderItems  OrderItem[] 
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}


model Image {
  id       String   @id @default(uuid())
  productId String
  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([productId])
}

model Order {
  id       String   @id @default(uuid())
  storeId  String   
  store    Store    @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems  OrderItem[]
  isPaid    Boolean @default(false)
  phone    String   @default("")
  address  String   @default("")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}


model OrderItem {
  id       String   @id @default(uuid())
  orderId  String
  order    Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}